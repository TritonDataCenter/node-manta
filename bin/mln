#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path-platform');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('mln: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'source dest');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'source dest');

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'source required', 'source dest');
    if (opts._args.length < 2)
        manta.cli_usage(OPTIONS_PARSER, 'dest required', 'source dest');

    opts.source = path.posix.normalize(opts._args[0]);
    opts.path = path.posix.normalize(opts._args[1]);

    return (opts);
}



///--- Mainline

(function main() {
    var options = parseOptions();
    var client = manta.createBinClient(options);

    ifError(manta.assertPath(options.path, true));

    client.ln(options.source, options.path, function (err) {
        ifError(err);

        client.close();
    });
})();
