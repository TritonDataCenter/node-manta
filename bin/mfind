#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var http = require('http');
var https = require('https');
var path = require('path');
var url = require('url');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var clone = require('clone');
var dashdash = require('dashdash');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var CLIENT;
var LOG = bunyan.createLogger({
    name: require('path').basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['limit', 'l'],
            type: 'positiveInteger',
            help: 'limit the number of results returned',
            helpArg: 'LIMIT'
        },
        {
            names: ['name', 'n'],
            type: 'string',
            help: 'only list objects that match /name/',
            helpArg: 'NAME'
        },
        {
            names: ['parallel', 'p'],
            type: 'positiveInteger',
            help: 'limit concurrent operations',
            'default': 50,
            helpArg: 'CONCURRENCY'
        },
        {
            names: ['size', 's'],
            type: 'positiveInteger',
            help: 'only list objects greater than <size> bytes',
            helpArg: 'SIZE'
        },
        {
            names: ['type', 't'],
            type: 'string',
            help: 'only return names of type <type> d=directory, o=object',
            helpArg: 'd|o'
        },
        {
            names: ['mindepth'],
            type: 'positiveInteger',
            help: 'only return items with at least this depth',
            helpArg: 'DEPTH',
        },
        {
            names: ['maxdepth'],
            type: 'positiveInteger',
            help: 'only return items less than this depth',
            helpArg: 'DEPTH',
        },
    ])
});
var TOTAL_ENTRIES = 0;



///--- Functions

function ifError(err) {
    if (err) {
        console.error('mfind: ' +
                      (process.env.DEBUG === '1' ? err.stack : err.toString()));
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH]');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, '[PATH]');

    if (opts.name)
        opts.name = new RegExp(opts.name);

    if (!opts._args.length) {
        opts.paths = ['/' + opts.account + '/stor'];
    } else {
        opts.paths = opts._args;
    }

    return (opts);
}


function printEntry(opts, obj) {
    if (opts.name && !opts.name.test(obj.name))
        return;
    if (opts.size && obj.type === 'object' && opts.size > obj.size)
        return;
    if (opts.type && opts.type === 'd' && obj.type !== 'directory')
        return;
    if (opts.type && opts.type === 'o' && obj.type !== 'object')
        return;
    if (opts.maxdepth && opts.depth > opts.maxdepth)
        return;
    if (opts.mindepth && opts.depth < opts.mindepth)
        return;


    console.log(opts.path + (obj.name ? ('/' + obj.name) : ''));
    if (opts.limit && (++TOTAL_ENTRIES >= opts.limit))
        process.exit(0);
}



///--- Mainline

(function main() {
    var options = parseOptions();
    var client = manta.createBinClient(options);

    var queue = new manta.Queue({
        limit: options.parallel,
        worker: function ls(opts, cb) {
            var last;
            var _opts = {
                query: {}
            };

            if (options.limit)
                _opts.query.limit = options.limit;
            if (opts.marker)
                _opts.query.marker = opts.marker;

            client.ls(opts.path, _opts, function (err, res) {
                ifError(err);

                res.on('directory', function onDirectory(dir) {
                    if (dir.name === opts.marker)
                        return;

                    printEntry(opts, dir);

                    if (opts.maxdepth && opts.depth >= opts.maxdepth)
                        return;

                    var p = opts.path + '/' + dir.name;
                    last = dir.name;
                    queue.push({
                        client: client,
                        name: options.name,
                        path: p,
                        size: options.size,
                        type: options.type,
                        depth: opts.depth + 1,
                        mindepth: options.mindepth,
                        maxdepth: options.maxdepth,
                    });
                });

                res.on('object', function onObject(obj) {
                    if (obj.name === opts.marker)
                        return;

                    last = obj.name;
                    printEntry(opts, obj);
                });

                res.once('error', ifError);

                res.once('end', function onEnd(http_res) {
                    if (last) {
                        queue.push({
                            marker: last,
                            name: options.name,
                            path: opts.path,
                            type: options.type,
                            depth: opts.depth,
                            mindepth: options.mindepth,
                            maxdepth: options.maxdepth,
                        });
                    }
                    cb();
                });
            });
        }
    });

    var startQ = new manta.Queue({
        limit: 1,
        worker: function (p, cb) {
            var _opts = clone(options);
            _opts.depth = 1;
            _opts.path = p;
            client.info(p, function (err, info) {
                if (err) {
                    client.get(p, function (err2) {
                        ifError(err2);
                        ifError(err);
                    });
                    return;
                }

                if (info.extension === 'directory') {
                    queue.push(_opts);
                } else {
                    printEntry(_opts, {});
                }
                cb();
            });
        }
    });

    options.paths.forEach(function (p) {
        ifError(manta.assertPath(p, true));
        startQ.push(manta.path(p, true));
    });
    startQ.close();

    startQ.once('end', function () {
        queue.once('end', client.close.bind(client));
        queue.close();
    });
})();
