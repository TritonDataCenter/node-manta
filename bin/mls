#!/usr/bin/env node
/*
 * Copyright 2018 Joyent, Inc.
 */

var path = require('path-platform');
var url = require('url');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var jsprim = require('jsprim');
var moment = require('moment');
var once = require('once');
var sprintf = require('extsprintf').sprintf;

var manta = require('../lib');



///--- Globals

var NAME = path.basename(process.argv[1]);
var LOG = bunyan.createLogger({
    name: NAME,
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr
});

var CLI_OPTIONS = jsprim.deepCopy(manta.DEFAULT_CLI_OPTIONS);

// remove `-h` from the default options so we can use it
CLI_OPTIONS.forEach(function (opt) {
    if (opt.names && opt.names[0] === 'help') {
        opt.names = ['help'];
    }
});

var OPTIONS_PARSER = dashdash.createParser({
    options: CLI_OPTIONS.concat([
        {
            group: NAME + ' options'
        },
        {
            names: ['json', 'j'],
            type: 'bool',
            help: 'output in JSON'
        },
        {
            names: ['fulljson'],
            type: 'bool',
            help: 'JSON output, and display the HTTP headers if available'
        },
        {
            names: ['long', 'l'],
            type: 'bool',
            help: 'use a long listing format'
        },
        {
            names: ['human-readable', 'h'],
            type: 'bool',
            help: 'Human readable output when using a long listing format'
        },
        {
            names: ['turbo'],
            type: 'bool',
            help: 'Turbo button. Operators only. No sorting. This overrides the --reverse and --time options.'
        },
        {
            names: ['marker', 'm'],
            type: 'string',
            help: 'start listing from MARKER',
            helpArg: 'MARKER'
        },
        {
            names: ['reverse', 'r'],
            type: 'bool',
            help: 'reverse order while sorting'
        },
        {
            names: ['type'],
            type: 'string',
            help: 'only return names of type <type> d=directory, o=object',
            helpArg: 'd|o'
        },
        {
            names: ['time', 't'],
            type: 'bool',
            help: 'Sort listing by modification time, newest first'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('mls: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH]...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, '[PATH]...');

    manta.cliVersionCheckPrintAndExit(opts);
    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);

    opts.paths = [];
    if (opts._args.length < 1) {
        opts.paths = ['/' + opts.account + '/stor'];
    } else {
        opts.paths = opts._args.slice(0).map(function (p) {
            p = path.posix.normalize(p);
            if (!/^\//.test(p) && !/^~/.test(p))
                p = '/' + opts.account + '/stor/' + p;

            ifError(manta.assertPath(p, true));
            return (p);
        });
    }

    if (opts.type) {
        if (opts.type === 'o') {
            opts.type = 'object';
        } else if (opts.type === 'd') {
            opts.type = 'directory';
        } else {
            ifError(new Error('invalid type, must be "d" (directory) or ' +
              '"o" (object)'));
        }
    }

    if (opts.turbo) {
        delete opts.reverse;
        delete opts.mtime;
        delete opts.time;
    }

    try {
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH]...');
    }

    return (opts);
}


function printEntry(opts, obj) {
    var safename = manta.escapePath(obj.name);
    if (opts.json || opts.fulljson) {
        if (!opts.fulljson) {
            if (obj.headers) {
                obj.durability = obj.headers['durability-level'];
                obj.mtime = obj.headers['last-modified'];
                delete obj.headers;
            }
        }
        console.log('%j', obj);
    } else if (opts['long']) {
        /*
         * An `obj` from ListDirectory has a `obj.mtime` in ISO format:
         *     {"name":"foo.txt","mtime":"2014-01-28T22:11:40.496Z",...}
         * which `moment()` can parse by default
         * (http://momentjs.com/docs/#/parsing/string/).
         *
         * An `obj` from `GetObject` has a "last-modified" header:
         *     last-modified: Fri, 24 Jun 2016 23:03:53 GMT
         * in "HTTP-date" format
         * (https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1),
         * which moment *cannot* parse
         * (https://github.com/moment/moment/issues/1407).
         */
        var d;
        if (obj.mtime) {
            d = moment(obj.mtime);
        } else {
            assert.string(obj.headers['last-modified'], 'last-modifed header');
            d = moment(new Date(obj.headers['last-modified']));
        }

        var fmt = 'MMM DD ';
        var now = moment();
        if (now.diff(d, 'months') >= 6) {
            fmt += ' YYYY';
        } else {
            fmt += 'HH:mm';
        }

        var owner = obj.parent.split(/\//)[1];
        var size = obj.type === 'directory' ? 0 : (obj.size || 0);
        var out = sprintf('%srwxr-xr-x 1 %s %13s %s %s',
                          (obj.type === 'directory' ? 'd' : '-'),
                          owner,
                          opts.human_readable ? manta.prettyBytes(size) : size,
                          d.format(fmt),
                          safename);

        console.log(out);
    } else {
        console.log('%s%s',
                    safename,
                    obj.type === 'directory' ? '/' : '');
    }
}



///--- Mainline

(function main() {
    var done = 0;
    var options = parseOptions();
    var client = manta.createBinClient(options);

    function cb(err) {
        ifError(err);

        if (++done === options.paths.length)
            client.close();
    }

    options.paths.forEach(function (p) {
        client.ls(p, options, function (err, res) {
            if (err) {
                if (err.name === 'InvalidDirectoryError') {
                    printEntry(options, err.info);
                    cb();
                } else {
                    client.get(p, cb);
                }
                return;
            }

            var print = printEntry.bind(null, options);
            res.on('directory', print);
            res.on('object', print);
            res.once('error', cb);
            res.once('end', cb.bind(null, null)); // end emits a "res"; ignore
        });
    });
})();
