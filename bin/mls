#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var path = require('path-platform');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var moment = require('moment');
var once = require('once');
var restify = require('restify');
var sprintf = require('extsprintf').sprintf;
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['json', 'j'],
            type: 'bool',
            help: 'output in JSON'
        },
        {
            names: ['long', 'l'],
            type: 'bool',
            help: 'use a long listing format'
        },
        {
            names: ['marker', 'm'],
            type: 'string',
            help: 'start listing from MARKER',
            helpArg: 'MARKER'
        },
        {
            names: ['reverse', 'r'],
            type: 'bool',
            help: 'reverse order while sorting'
        },
        {
            names: ['type'],
            type: 'string',
            help: 'only return names of type <type> d=directory, o=object',
            helpArg: 'd|o'
        },
        {
            names: ['time', 't'],
            type: 'bool',
            help: 'Sort listing by modification time, newest first'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('mls: ' + err.toString());
        process.exit(1);
    }
}


function ls(client, p, options, cb) {
    cb = once(cb);

    var last;
    var opts = {
        log: LOG,
        query: {}
    };
    var rss;
    var seen = 0;

    if (options.limit)
        opts.query.limit = options.limit;
    if (options.marker)
        opts.query.marker = options.marker;
    if (options.time)
        opts.query.sort = 'mtime';
    if (options.reverse)
        opts.query.sort_order = 'reverse';
    if (options.type)
        opts.query[options.type] = true;

    (function _ls() {
        client.ls(p, opts, function (err, res) {
            ifError(err);

            function onEntry(e) {
                if (options.time && (e.mtime === (last ? last.mtime : last))) {
                        return;
                } else if (e.name === (last ? last.name : last)) {
                        return;
                }

                seen++;
                last = e;
                e.parent = p;
                printEntry(e, options);
            }

            res.on('directory', onEntry);
            res.on('object', onEntry);
            res.once('error', cb);
            res.once('end', function (http_res) {
                rss = rss || parseInt(http_res.headers['result-set-size'],
                                      10);
                if (options.limit !== undefined ||
                    seen >= rss || !last) {
                    cb(null);
                    return;
                }

                if (options.time) {
                    opts.query.marker = last.mtime;
                } else {
                    opts.query.marker = last.name;
                }

                _ls();
            });
        });
    })();
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH]...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, '[PATH]...');

    opts.paths = [];
    if (opts._args.length < 1) {
        opts.paths = ['/' + opts.account + '/stor'];
    } else {
        opts.paths = opts._args.slice(0).map(function (p) {
            p = path.posix.normalize(p);
            if (!/^\//.test(p) && !/^~/.test(p))
                p = '/' + opts.account + '/stor/' + p;

            ifError(manta.assertPath(p, true));
            return (p);
        });
    }

    if (opts.type) {
        if (opts.type === 'o') {
            opts.type = 'object';
        } else if (opts.type === 'd') {
            opts.type = 'directory';
        } else {
            ifError(new Error('invalid type, must be t or o'));
        }
    }

    return (opts);
}


function printEntry(obj, opts) {
    if (obj.headers)
        delete obj.headers;

    if (opts.json) {
        console.log('%j', obj);
    } else if (opts['long']) {
        var d = moment(obj.mtime);
        var fmt = 'MMM D ';
        var now = moment();

        if (now.diff(d, 'months') >= 6) {
            fmt += ' YYYY';
        } else {
            fmt += 'HH:mm';
        }

        var owner = obj.parent.split(/\//)[1];
        var out = sprintf('%srwxr-xr-x 1 %s %13d %s %s',
                          (obj.type === 'directory' ? 'd' : '-'),
                          owner,
                          (obj.type === 'directory' ? '0' : (obj.size || '0')),
                          d.format(fmt),
                          obj.name);

        console.log(out);
    } else {
        console.log('%s%s',
                    obj.name,
                    obj.type === 'directory' ? '/' : '');
    }
}



///--- Mainline

(function main() {
    var done = 0;
    var options = parseOptions();
    var client = manta.createBinClient(options);

    function cb(err) {
        ifError(err);

        if (++done === options.paths.length)
            client.close();
    }

    options.paths.forEach(function (p) {
        client.info(p, function (info_err, info) {
            if (info_err) {
                client.get(p, cb);
            } else if (info.extension === 'directory') {
                ls(client, p, options, cb);
            } else {
                info.parent = p;
                printEntry(info, options);
                cb();
            }
        });
    });
})();
