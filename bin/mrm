#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var assert = require('assert-plus');
var f = require('util').format;
var path = require('path');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');

///--- Functions

function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['interactive', 'I'],
                type: 'bool',
                help: 'confirm before deleting objects'
            },
            {
                names: ['parallel', 'p'],
                type: 'positiveInteger',
                help: 'limit concurrent operations (default 50)',
                'default': 50,
                helpArg: 'NUM'
            },
            {
                names: ['recursive', 'r'],
                type: 'bool',
                help: 'remove directories and their contents recursively'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (err) {
        console.error('mrm: ' + err.toString());
        process.exit(1);
    }
}

///--- Mainline

(function main() {
    var argTypes = ['mpath'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        log: log
    };
    var options = manta.parseOptions(parseArgs);
    var client = manta.createBinClient(options);
    var i = -1;

    if (options.interactive && !process.stdin.isTTY) {
        console.error('stdin must be a tty when interactive specified');
        process.exit(1);
    }

    (function rm(cb_err) {
        ifError(cb_err);

        var p = options.paths[++i];
        if (!p) {
            client.close();
            return;
        }

        client.info(p, function (infoErr, info) {
            if (infoErr) {
                /*
                 * The first request done by `client.info` is a HEAD, for
                 * which there is no response body with good error details.
                 * Fallback to `client.get` to hopefully get helpful error
                 * details.
                 *
                 * If `client.get` succeeds (e.g. if infoErr was transient),
                 * then use the `infoErr` we have.
                 */
                client.get(p, {returnErrorOnly: true}, function (getErr) {
                    ifError(getErr || infoErr);
                });
                return;
            }

            if (info.extension === 'directory') {
                // entry is a directory
                if (!options.recursive) {
                    console.error('%s is not an object', p);
                    process.exit(1);
                }

                if (!options.interactive) {
                    client.rmr(p, options, rm);
                    return;
                }

                manta.promptConfirm(
                    f('recursively remove directory `%s` [y/N]?: ', p),
                    function (ans) {

                    if (!ans) {
                        // skip removing
                        rm();
                        return;
                    }

                    client.rmr(p, options, rm);
                });
            } else {
                // entry is an object
                if (!options.interactive) {
                    client.unlink(p, rm);
                    return;
                }

                manta.promptConfirm(f('remove object `%s` [y/N]?: ', p),
                    function (ans) {

                    if (!ans) {
                        rm();
                        return;
                    }

                    client.unlink(p, rm);
                });
            }
        });
    })();
})();
