#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var assert = require('assert-plus');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var mantaShortenerClient = require('manta-shortener-client');

var manta = require('../lib');


///--- Functions

function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['expires', 'e'],
                type: 'positiveInteger',
                help: 'expiration time (epoch). Default is 1h from now.',
                helpArg: 'EXPIRATION'
            },
            {
                names: ['expires-relative', 'E'],
                type: 'string',
                help: 'expiration time (relative). Default is 1h from now.',
                helpArg: 'EXPIRATION'
            },
            {
                names: ['file', 'f'],
                type: 'string',
                help: 'Use private key. Default is to try the SSH agent ' +
                    ' first then fallback to $HOME/.ssh/id_rsa)',
                helpArg: 'PRIVATE_KEY'
            },
            {
                names: ['algorithm', 'g'],
                type: 'string',
                help: 'Sign using a specific algorithm.',
                helpArg: 'PRIVATE_KEY'
            },
            {
                names: ['method', 'm'],
                type: 'arrayOfString',
                help: 'HTTP method to support',
                'default': ['GET'],
                helpArg: 'METHOD'
            },
            {
                names: ['role-tag'],
                type: 'arrayOfString',
                help: 'role tags to apply to the created object',
                helpArg: 'TAG,TAG...'
            },
            {
                names: ['short', 's'],
                type: 'bool',
                help: 'Create a short URL'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (err) {
        console.error('msign: ' + err.toString());
        process.exit(1);
    }
}


function isValidMethod(m) {
    const methods = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];
    return (methods.indexOf(m) !== -1);
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    const methodCheck = function (m) {
        const upperM = m.toUpperCase();
        if (!isValidMethod(m)) {
            manta.cli_usage(parser,
                            'method invalid: ' + m,
                            'path...');
        }

        return (upperM);
    };
    opts.method = opts.method.map(methodCheck);

    return (opts);
}


///--- Mainline

(function main() {
    var argTypes = ['mpath'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var opts = manta.parseOptions(parseArgs);

    var client;
    try {
        client = manta.createBinClient(opts);
    } catch (e) {
        ifError(e);
    }

    if (opts.hasOwnProperty('expires') &&
        opts.hasOwnProperty('expires_relative')) {

        ifError(new Error('-e and -E cannot be specified together'));
    }

    // normalize expires (-e and -E) options
    var expires = Math.floor((new Date().getTime() / 1000) + 3600);

    if (opts.hasOwnProperty('expires_relative')) {
        var match = opts.expires_relative.match(/^([1-9][0-9]*)([smhdwy])$/);
        if (!match) {
            ifError(new Error('invalid expires: ' + opts.expires_relative));
        }

        var now = Math.floor(Date.now() / 1000);
        var num = parseInt(match[1], 10);

        // This should be the case because of the regex match above
        assert.number(num, 'num');
        assert(num > 0, 'num > 0');

        switch (match[2]) {
        case 's':
            expires = now + (num);
            break;
        case 'm':
            expires = now + (num * 60);
            break;
        case 'h':
            expires = now + (num * 60 * 60);
            break;
        case 'd':
            expires = now + (num * 60 * 60 * 24);
            break;
        case 'w':
            expires = now + (num * 60 * 60 * 24 * 7);
            break;
        case 'y':
            expires = now + (num * 60 * 60 * 24 * 365);
            break;
        default:
            ifError(new Error('invalid expires: ' + opts.expires));
            break;
        }
    } else if (opts.hasOwnProperty('expires')) {
        expires = opts.expires;
    }

    opts.paths.forEach(function (p) {

        ifError(manta.assertPath(p, true));

        var _opts = {
            algorithm: opts.algorithm,
            expires: expires,
            host: url.parse(opts.url).host,
            keyId: opts.keyId,
            log: opts.log,
            method: opts.method,
            role: opts.role,
            'role-tag': opts['role-tag'],
            path: p,
            sign: client.sign,
            user: opts.user,
            subuser: opts.subuser
        };
        client.signURL(_opts, function (err, resource) {
            ifError(err);
            // Remove trailing slashes from MANTA_URL before combining with
            // the signed path:
            /* JSSTYLED */
            var uu = opts.url.replace(/\/*$/, '');
            if (!opts.short) {
                console.log(uu + resource);
                return;
            }
            // Shorten the URL using the manta url shortener.
            var shortenOpts = {
                expires: opts.expires,
                url: uu + resource
            };
            mantaShortenerClient.shorten(shortenOpts, function (sErr, sUrl) {
                if (sErr) {
                    // In the case of a shortening error, show the full url.
                    console.log(uu + resource);
                    ifError(sErr);
                    return;
                }
                console.log(sUrl);
            });
        });
    });

    client.close();
})();
