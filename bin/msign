#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});
var METHODS = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['expires', 'e'],
            type: 'string',
            help: 'expiration time (ISO 8601 DateTimeString or time since' +
               ' the epoch in seconds). Default is 1hr from now.',
            'default': null,
            helpArg: 'EXPIRATION'
        },
        {
            names: ['file', 'f'],
            type: 'string',
            help: 'Use private key. Default is to try the SSH agent first ' +
                ' then fallback to $HOME/.ssh/id_rsa)',
            helpArg: 'PRIVATE_KEY'
        },
        {
            names: ['algorithm', 'g'],
            type: 'string',
            help: 'Sign using algorithm. Default is RSA-SHA256',
            'default': 'RSA-SHA1',
            helpArg: 'PRIVATE_KEY'
        },
        {
            names: ['method', 'm'],
            type: 'arrayOfString',
            help: 'HTTP method to support',
            'default': ['GET'],
            helpArg: 'METHOD'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('msign: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    opts.method = opts.method.map(function (m) {
        m = m.toUpperCase();
        if (METHODS.indexOf(m) === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'method invalid: ' + m,
                            'path...');
        }
        return (m);
    });

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    opts.paths = opts._args;

    return (opts);
}

function validateDate(dateString) {
    var num_reg =/^\d+$/;
    var iso_reg =/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/;
    var rtn;

    if (dateString === null) {
        return Math.floor((Date.now() / 1000) + 3600);
    }

    if (num_reg.test(dateString)) {
        rtn = parseInt(dateString);
    }
    else if (iso_reg.test(dateString)) {
        date = new Date(dateString);
        if (isNaN(date.valueOf())) {
            ifError(date);
        }
        rtn = Math.floor(date.getTime() / 1000);
    }
    else {
        ifError('Inproper Date format');
    }

    return (rtn);
}


///--- Mainline

(function main() {
    var client;
    var opts = parseOptions();
    try {
        client = manta.createBinClient(opts);
    } catch (e) {
        ifError(e);
    }
    opts.paths.forEach(function (p) {

        var _url = url.parse(p, true);
        ifError(manta.assertPath(_url.pathname, true));

        var _opts = {
            algorithm: opts.algorithm,
            expires: validateDate(opts.expires),
            host: url.parse(opts.url).host,
            keyId: opts.keyId,
            log: opts.log,
            method: opts.method,
            query: _url.query,
            path: manta.path(_url.pathname),
            sign: client.sign,
            user: opts.account
        };
        client.signUrl(_opts, function (err, resource) {
            ifError(err);
            console.log(opts.url + resource);
        });
    });

    client.close();
})();
