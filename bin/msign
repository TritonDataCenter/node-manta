#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2016 Joyent, Inc.
 */

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');



///--- Globals

var NAME = path.basename(process.argv[1]);
var LOG = bunyan.createLogger({
    name: NAME,
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr
});
var METHODS = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            group: NAME + ' options'
        },
        {
            names: ['expires', 'e'],
            type: 'string',
            help: 'expiration time (epoch|relative). Default is 1h from now.',
            'default': '1h',
            helpArg: 'EXPIRATION'
        },
        {
            names: ['file', 'f'],
            type: 'string',
            help: 'Use private key. Default is to try the SSH agent first ' +
                ' then fallback to $HOME/.ssh/id_rsa)',
            helpArg: 'PRIVATE_KEY'
        },
        {
            names: ['algorithm', 'g'],
            type: 'string',
            help: 'Sign using a specific algorithm.',
            helpArg: 'PRIVATE_KEY'
        },
        {
            names: ['method', 'm'],
            type: 'arrayOfString',
            help: 'HTTP method to support',
            'default': ['GET'],
            helpArg: 'METHOD'
        },
        {
            names: ['role-tag'],
            type: 'arrayOfString',
            help: 'role tags to apply to the created object',
            helpArg: 'TAG,TAG...'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('msign: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    manta.cliVersionCheckPrintAndExit(opts);
    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);

    opts.method = opts.method.map(function (m) {
        m = m.toUpperCase();
        if (METHODS.indexOf(m) === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'method invalid: ' + m,
                            'path...');
        }
        return (m);
    });

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    opts.paths = opts._args;

    try {
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    return (opts);
}



///--- Mainline

(function main() {
    var client;
    var opts = parseOptions();
    try {
        client = manta.createBinClient(opts);
    } catch (e) {
        ifError(e);
    }
    // normalize expires option
    var expires;
    var match;
    if ((match = opts.expires.match(/^([0-9]+)([smhdwy])$/))) {
        var now = Math.floor(Date.now() / 1000);
        var num = parseInt(match[1], 10);
        switch (match[2]) {
        case 's':
            expires = now + (num);
            break;
        case 'm':
            expires = now + (num * 60);
            break;
        case 'h':
            expires = now + (num * 60 * 60);
            break;
        case 'd':
            expires = now + (num * 60 * 60 * 24);
            break;
        case 'w':
            expires = now + (num * 60 * 60 * 24 * 7);
            break;
        case 'y':
            expires = now + (num * 60 * 60 * 24 * 365);
            break;
        default:
            ifError(new Error('invalid expires: ' + opts.expires));
            break;
        }
    } else if ((match = opts.expires.match(/^([0-9]+)$/))) {
        expires = parseInt(opts.expires, 10);
    } else {
        ifError(new Error('invalid expires: ' + opts.expires));
        return;
    }

    opts.paths.forEach(function (p) {

        ifError(manta.assertPath(p, true));

        var _opts = {
            algorithm: opts.algorithm,
            expires: expires,
            host: url.parse(opts.url).host,
            keyId: opts.keyId,
            log: opts.log,
            method: opts.method,
            role: opts.role,
            'role-tag': opts['role-tag'],
            path: p,
            sign: client.sign,
            user: opts.user,
            subuser: opts.subuser
        };
        client.signURL(_opts, function (err, resource) {
            ifError(err);
            // Remove trailing slashes from MANTA_URL before combining with
            // the signed path:
            /* JSSTYLED */
            var uu = opts.url.replace(/\/*$/, '');
            console.log(uu + resource);
        });
    });

    client.close();
})();
