#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 * Copyright 2023 MNX Cloud, Inc.
 */

var fs = require('fs');
var url = require('url');

var mod_path = require('path');
var strsplit = require('strsplit');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var once = require('once');

var manta = require('../lib');

var http = require('http');
var https = require('https');
var tar = require('tar');


///--- Globals

var IN_PROGRESS = {};
var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);


///--- Functions

/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['copies', 'c'],
                type: 'positiveInteger',
                help: 'number of copies to make',
                helpArg: 'COPIES',
                default: 2
            },
            {
                names: ['file', 'f'],
                type: 'string',
                help: 'local file to upload (required)',
                helpArg: 'FILE'
            },
            {
                names: ['header', 'H'],
                type: 'arrayOfString',
                help: 'HTTP headers to include',
                helpArg: 'HEADER'
            },
            {
                names: ['parallel', 'p'],
                type: 'positiveInteger',
                help: 'limit concurrent operations (default 20)',
                default: 20,
                helpArg: 'NUM'
            },
            {
                names: ['retries', 'r'],
                type: 'positiveInteger',
                help: 'number of retries on error (default 3)',
                default: 3,
                helpArg: 'RETRIES'
            },
            {
                names: ['role-tag'],
                type: 'arrayOfString',
                help: 'role tags to apply to the destination object',
                helpArg: 'TAG,TAG...'
            }
        ])
    });

    return (parser);

}


function ifError(err) {
    if (err) {
        console.error('muntar: ' + err.toString());
        process.exit(1);
    }
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (!opts.file)
        manta.cli_usage(parser, 'file is a required argument', 'path');

    ifError(manta.assertPath(opts._args[0], true));
    opts.path = manta.path(opts._args[0], true);

    if (opts.role_tag && opts.role_tag.length === 1) {
        /* JSSTYLED */
        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
    }

    return (opts);
}


function put(client, path, stream, opts, cb) {
    client.put(path, stream, opts, function (err) {
        if (!err || !err.body ||
            (err.body.code !== 'ParentNotDirectory' &&
             err.body.code !== 'DirectoryDoesNotExist')) {
            cb(err);
            return;
        }

        /*
         * Our put failed.  If the put failed because we were missing
         * a parent directory, we'll try to make the directory --
         * assuring that we don't have two outstanding requests to
         * make the same directory.
         */
        var dir = path.match(/.*\//)[0];

        function postmkdir(_err) {
            if (_err) {
                cb(_err);
                return;
            }

            client.put(path, stream, opts, cb);
        }

        if (IN_PROGRESS[dir]) {
            IN_PROGRESS[dir].push(postmkdir);
            return;
        }

        IN_PROGRESS[dir] = [ postmkdir ];

        client.mkdirp(dir, opts, function (_err) {
            IN_PROGRESS[dir].forEach(function (post) {
                post.call(this, _err);
            });

            delete IN_PROGRESS[dir];
        });
    });
}


/*
 * Absent intermediate streams for each entry that could be paused without
 * pausing the tar parsing, each worker needs to take its own pass through
 * the tarball.
 */
function worker(client, tarball, callback, log) {
    var entry = 0;
    var inflight = 1;
    var stream = fs.createReadStream(tarball.file);
    var pipe = stream.pipe(tar.Parse());
    var options = tarball.options;

    callback = once(callback);

    function cb() {
        if (--inflight > 0)
            return;

        callback();
    }

    function done(path, e, _entry) {
        return (function (err) {
            if (!err) {
                console.log(path);

                if (tarball.retry[_entry])
                    delete tarball.retry[_entry];
            } else {
                if (!err.statusCode || err.statusCode < 500)
                    ifError(err);

                /*
                 * If we've had an internal error (500), indicate that this
                 * entry needs to be retried -- unless we've already retried
                 * this entry the maximum number of times, in which case we'll
                 * abort.
                 */
                if (!tarball.retry[_entry])
                    tarball.retry[_entry] = 0;

                if (tarball.retry[_entry]++ >= tarball.options.retries) {
                    log.debug({ err: err, num: tarball.retry[_entry] },
                        'put to ' + path + ' failed; aborting');
                    ifError(err);
                }

                log.debug({ err: err, num: tarball.retry[_entry] },
                    'put to ' + path + ' failed; retrying');
                e.resume();
            }

            cb();
        });
    }

    pipe.once('end', cb);
    pipe.on('entry', function (e) {
        if (e.props.size === 0)
            return;

        if (entry++ < tarball.next) {
            if (!tarball.needretry[entry])
                return;
        } else {
            tarball.next = entry;
        }

        e.pause();

        var headers = options.headers || {};
        if (options.role_tag) {
            headers.headers['role-tag'] = options.role_tag.join(',');
        }

        var p = options.path + '/' + e.props.path;
        var o = {
            copies: options.copies,
            headers: headers,
            size: e.props.size
        };

        inflight++;
        put(client, p, e, o, done(p, e, entry));
    });
}



///--- Mainline

(function main() {
    var name = mod_path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var argTypes = ['mpath', 'none'];
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var options = manta.parseOptions(parseArgs);

    log.warn('muntar is deprecated. Switch to msync.');

    http.globalAgent.maxSockets = MAX_SOCKETS;
    https.globalAgent.maxSockets = MAX_SOCKETS;

    var client = manta.createBinClient(options);
    var done = 0;
    var tarball = {
        file: options.file,
        options: options,
        next: 0,
        needretry: {},
        retry: {}
    };

    function lastdone() {
        /*
         * Once all workers are done, we will have a final worker keep
         * reprocessing the stream and pick up any failed entries until we
         * have nothing left to retry.
         */
        if (Object.keys(tarball.retry).length === 0) {
            client.close();
            return;
        }

        worker(client, tarball, lastdone, log);
    }

    function cb() {
        if (++done === options.parallel) {
            tarball.needretry = tarball.retry;
            lastdone();
        }
    }

    for (var i = 0; i < options.parallel; i++)
        worker(client, tarball, cb, log);
})();
