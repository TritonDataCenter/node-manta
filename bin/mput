#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 * Copyright 2023 MNX Cloud, Inc.
 */

// Workaround a bug in node v10-16 when using OpenSSL 3 without ssh-agent.
// This needs to be set before the crypto module is loaded.
if (typeof (process.env.OPENSSL_CONF) === 'undefined') {
    process.env['OPENSSL_CONF'] = '';
}

var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var strsplit = require('strsplit');
var url = require('url');

var backoff = require('backoff');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var once = require('once');

var manta = require('../lib');


///--- Functions

/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['copies', 'c'],
                type: 'positiveInteger',
                help: 'number of copies to make',
                nhelpArg: 'COPIES',
                default: 2
            },
            {
                names: ['file', 'f'],
                type: 'string',
                help: 'local file to upload',
                helpArg: 'FILE'
            },
            {
                names: ['header', 'H'],
                type: 'arrayOfString',
                help: 'HTTP headers to include',
                helpArg: 'HEADER'
            },
            {
                names: ['md5', 'm'],
                type: 'bool',
                help: 'calculate MD5 and then upload (requires -f/--file)'
            },
            {
                names: ['parents', 'p'],
                type: 'bool',
                help: 'create parent directories as needed'
            },
            {
                names: ['quiet', 'q'],
                type: 'bool',
                help: 'disable the progress bar'
            },
            {
                names: ['progress'],
                type: 'bool',
                help: 'force the progress bar to draw, even when \
                       stderr redirected'
            },
            {
                names: ['role-tag'],
                type: 'arrayOfString',
                help: 'role tags to apply to the created object',
                helpArg: 'TAG,TAG...'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (!err)
        return;

    if (err.name === 'OperationNotAllowedOnRootDirectoryError' ||
        err.name === 'OperationNotAllowedOnDirectoryError') {
        console.error('mput: Cannot write to a directory; ' +
                      'specify full object path');
    } else if (err.name === 'PreconditionFailedError') {
        console.error('mput: Cannot write because HTTP precondition not met.');
    } else {
        console.error('mput: ' + err.toString());
    }

    process.exit(1);
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (opts.md5 && !opts.file)
        manta.cli_usage(parser, '--md5 requires --file', 'path...');

    ifError(manta.assertPath(opts._args[0], true));
    opts.path = manta.path(opts._args[0], true);

    if (opts.role_tag && opts.role_tag.length === 1) {
        /* JSSTYLED */
        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
    }

    return (opts);
}


function printEntry(obj) {
    console.log('%j', obj);
}


///--- Mainline

(function main() {
    var bar = null;
    var argTypes = ['mpath', 'none'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var options = manta.parseOptions(parseArgs);

    var client = manta.createBinClient(options);
    var headers = options.headers || {};

    if (options.role_tag) {
        headers['role-tag'] = options.role_tag.join(',');
    }

    var opts = {
        copies: options.copies,
        headers: headers,
        mkdirs: options.parents
    };

    function put(stream, stats, cb) {
        client.info(options.path, function (info_err, info) {
            if (info_err && info_err.statusCode !== 404) {
                    if (cb) {
                        cb(info_err);
                    } else {
                        ifError(info_err);
                    }
            } else if (info) {
                if (info.type === 'application/x-json-stream; type=directory') {
                    if (!options.file) {
                        console.error('cannot infer name without -f');
                        process.exit(1);
                    } else {
                        options.path += '/' + path.basename(options.file);
                    }
                }
            }

            var drawProgBar = !options.quiet && Boolean(process.stderr.isTTY);
            if (options.progress || drawProgBar) {
                bar = new manta.ProgressBar({
                    filename: options.path,
                    size: stats ? stats.size : undefined,
                    nosize: stats ? false : true,
                    devtty: options.progress
                });
                stream.on('data', function (data) {
                    bar.advance(data.length);
                });
                stream.once('end', function () {
                    bar.end();
                });
            }

            client.put(options.path, stream, opts, function onPut(err) {
                if (err) {
                    if (cb) {
                        cb(err);
                    } else {
                        ifError(err);
                    }
                }

                client.close();
                if (cb)
                    cb();
            });
        });
    }

    if (options.file) {
        fs.stat(options.file, function (err, stats) {
            ifError(err);

            if (!stats.isFile()) {
                console.error(options.file + ' is not a file');
                process.exit(1);
            }

            opts.size = stats.size;

            function write(_, cb) {
                cb = once(cb);
                var f_opts = {
                    start: 0,
                    end: stats.size > 0 ? (stats.size - 1) : 0
                };
                var fstream = fs.createReadStream(options.file, f_opts);
                fstream.pause();
                fstream.on('open', function () {
                    put(fstream, stats, cb);
                });
            }

            function md5() {
                var f_opts = {
                    start: 0,
                    end: stats.size - 1
                };
                var fstream = fs.createReadStream(options.file, f_opts);
                var hash = crypto.createHash('md5');

                fstream.on('data', hash.update.bind(hash));
                fstream.once('end', function () {
                    opts.headers['Content-MD5'] = hash.digest('base64');
                    upload();
                });
            }

            function upload() {
                var retry = backoff.call(write, null, ifError);
                retry.setStrategy(new backoff.ExponentialStrategy({
                    initialDelay: 1000,
                    maxDelay: 10000
                }));
                retry.failAfter(3);
                retry.on('backoff', function (num, delay, error) {
                    // If we set a HTTP/1.1 Conditional PUT header and the
                    // precondition was not met, then bail out without retrying:
                    if (error && error.name === 'PreconditionFailedError')
                        ifError(error);
                    log.debug({
                        err: error,
                        num: num,
                        delay: delay
                    }, 'request failed. %s', num === 3 ? 'fail' : 'retrying');
                });
                retry.start();
            }

            if (options.md5) {
                md5();
            } else {
                upload();
            }
        });
    } else {
        put(process.stdin);
    }
})();
