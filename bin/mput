#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2016 Joyent, Inc.
 */

var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var url = require('url');

var backoff = require('backoff');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var once = require('once');

var manta = require('../lib');



///--- Globals

var NAME = path.basename(process.argv[1]);
var LOG = bunyan.createLogger({
    name: NAME,
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            group: 'Client-side encryption options'
        },
        {
            names: ['encrypt', 'e'],
            type: 'bool',
            help: 'Encrypt the file before storing it in Manta, using ' +
            '--encrypt-* options.'
        },
        {
            names: ['encrypt-cipher'],
            type: 'string',
            env: 'MANTA_ENCRYPT_CIPHER',
            helpArg: 'CIPHER',
            help: 'Algorithm to use for encrypting file.'
        },
        {
            names: ['encrypt-hmac'],
            type: 'string',
            env: 'MANTA_ENCRYPT_HMAC',
            helpArg: 'HMAC',
            help: 'HMAC type to use when encrypting a file. Types are ' +
                'HmacMD5, HmacSHA1, HmacSHA256, and HmacSHA512'
        },
        {
            names: ['encrypt-key'],
            type: 'string',
            env: 'MANTA_ENCRYPT_KEY',
            helpArg: 'KEY',
            help: 'Base64 secret key for encrypting content.'
        },
        {
            names: ['encrypt-key-id'],
            type: 'string',
            env: 'MANTA_ENCRYPT_KEY_ID',
            helpArg: 'KEY_ID',
            help: 'Key identifier. This can be used for locating the key ' +
                'for decryption.'
        },
        {
            group: NAME + ' options'
        },
        {
            names: ['copies', 'c'],
            type: 'positiveInteger',
            help: 'number of copies to make',
            helpArg: 'COPIES',
            'default': 2
        },
        {
            names: ['file', 'f'],
            type: 'string',
            help: 'local file to upload',
            helpArg: 'FILE'
        },
        {
            names: ['header', 'H'],
            type: 'arrayOfString',
            help: 'HTTP headers to include',
            helpArg: 'HEADER'
        },
        {
            names: ['md5', 'm'],
            type: 'bool',
            help: 'calculate MD5 and then upload (requires -f/--file)'
        },
        {
            names: ['parents', 'p'],
            type: 'bool',
            help: 'create parent directories as needed'
        },
        {
            names: ['quiet', 'q'],
            type: 'bool',
            help: 'disable the progress bar'
        },
        {
            names: ['progress'],
            type: 'bool',
            help: 'force the progress bar to draw, even when stderr redirected'
        },
        {
            names: ['role-tag'],
            type: 'arrayOfString',
            help: 'role tags to apply to the created object',
            helpArg: 'TAG,TAG...'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (!err)
        return;

    if (err.name === 'OperationNotAllowedOnRootDirectoryError' ||
        err.name === 'OperationNotAllowedOnDirectoryError') {
        console.error('mput: Cannot write to a directory; ' +
                      'specify full object path');
    } else if (err.name === 'PreconditionFailedError') {
        console.error('mput: Cannot write because HTTP precondition not met.');
    } else {
        console.error('mput: ' + err.toString());
    }

    process.exit(1);
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    manta.cliVersionCheckPrintAndExit(opts);
    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME,
        ['mpath', 'none']);

    if (opts.md5 && !opts.file)
        manta.cli_usage(OPTIONS_PARSER, '--md5 requires --file', 'path...');

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    ifError(manta.assertPath(opts._args[0], true));
    opts.path = manta.path(opts._args[0], true);

    opts.headers = {};
    (opts.header || []).forEach(function (h) {
        if (h.indexOf(':') === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'header must be in the form of "[header]: value"',
                            'path...');
        }
        var tmp = h.split(':');
        opts.headers[tmp[0]] = tmp[1].trim();
    });

    if (opts['role-tag'] && opts['role-tag'].length === 1) {
        /* JSSTYLED */
        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
    }

    if (opts.encrypt) {
        if (!opts.encrypt_key || !opts.encrypt_key_id || !opts.encrypt_cipher) {
            manta.cli_usage(OPTIONS_PARSER, 'encrypt requires --encrypt-key, ' +
              '--encrypt-key-id, and --encrypt-cipher or related ' +
              'environment variables');
        }

        opts.encrypt = {
            key: (new Buffer(opts.encrypt_key, 'base64').toString()),
            keyId: opts.encrypt_key_id,
            cipher: opts.encrypt_cipher,
            hmacType: opts.encrypt_hmac
        };
    }

    return (opts);
}


function printEntry(obj) {
    console.log('%j', obj);
}



///--- Mainline

(function main() {
    var bar = null;
    var options = parseOptions();

    var client = manta.createBinClient(options);
    var headers = options.headers || {};

    if (options['role-tag'])
        headers['role-tag'] = options['role-tag'].join(',');

    var opts = {
        copies: options.copies,
        headers: headers,
        mkdirs: options.parents
    };

    function put(stream, stats, cb) {
        client.info(options.path, function (info_err, info) {
            if (info_err && info_err.statusCode !== 404) {
                    if (cb) {
                        cb(info_err);
                    } else {
                        ifError(info_err);
                    }
            } else if (info) {
                if (info.type === 'application/x-json-stream; type=directory') {
                    if (!options.file) {
                        console.error('cannot infer name without -f');
                        process.exit(1);
                    } else {
                        options.path += '/' + path.basename(options.file);
                    }
                }
            }

            var drawProgBar = !options.quiet && Boolean(process.stderr.isTTY);
            if (options.progress || drawProgBar) {
                bar = new manta.ProgressBar({
                    filename: options.path,
                    size: stats ? stats.size : undefined,
                    nosize: stats ? false : true,
                    devtty: options.progress
                });
                stream.on('data', function (data) {
                    bar.advance(data.length);
                });
                stream.once('end', function () {
                    bar.end();
                });
            }

            client.put(options.path, stream, opts, function onPut(err) {
                if (err) {
                    if (cb) {
                        cb(err);
                    } else {
                        ifError(err);
                    }
                }

                client.close();
                if (cb)
                    cb();
            });
        });
    }

    if (options.file) {
        fs.stat(options.file, function (err, stats) {
            ifError(err);

            if (!stats.isFile()) {
                console.error(options.file + ' is not a file');
                process.exit(1);
            }

            opts.size = stats.size;

            function write(_, cb) {
                cb = once(cb);
                var f_opts = {
                    start: 0,
                    end: stats.size > 0 ? (stats.size - 1) : 0
                };
                var fstream = fs.createReadStream(options.file, f_opts);
                fstream.pause();
                fstream.once('open', function () {
                    put(fstream, stats, cb);
                });
            }

            function md5() {
                var f_opts = {
                    start: 0,
                    end: stats.size - 1
                };
                var fstream = fs.createReadStream(options.file, f_opts);
                var hash = crypto.createHash('md5');

                fstream.on('data', hash.update.bind(hash));
                fstream.once('end', function () {
                    opts.headers['Content-MD5'] = hash.digest('base64');
                    upload();
                });
            }

            function upload() {
                var retry = backoff.call(write, null, ifError);
                retry.setStrategy(new backoff.ExponentialStrategy({
                    initialDelay: 1000,
                    maxDelay: 10000
                }));
                retry.failAfter(3);
                retry.on('backoff', function (num, delay, error) {
                    // If we set a HTTP/1.1 Conditional PUT header and the
                    // precondition was not met, then bail out without retrying:
                    if (error && error.name === 'PreconditionFailedError')
                        ifError(error);
                    LOG.debug({
                        err: error,
                        num: num,
                        delay: delay
                    }, 'request failed. %s', num === 3 ? 'fail' : 'retrying');
                });
                retry.start();
            }

            if (options.md5) {
                md5();
            } else {
                upload();
            }
        });
    } else {
        put(process.stdin);
    }
})();
