#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.
// Copyright (c) 2013, Carlos Cardenas. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var once = require('once');
var restify = require('restify');
var vasync = require('vasync');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});

var optionsMsg = [
        'OPTIONS:',
        '  directory   (required) local directory for sync',
        '  path        (required) Manta path',
        '  -a account  Manta account (specify this or export MANTA_USER)',
        '  -c copies   number of copies of each object to make (default 2)',
        '  -d depth    how deep to recurse on local sync',
        '  -r          perform remote sync',
        '  -n          only show files/directories that will be synced',
        '  -H header   add a header',
        '              repeat option to specify multiple headers',
        '  -k keyId    SSH fingerprint (specify this or export MANTA_KEY_ID)',
        '  -p parallel limit on number of concurrent operations (default 5)',
        '  -u url      Manta URL (specify this or export MANTA_URL)',
        '  -v          verbose mode'
].join('\n');


///--- Functions

function ifError(err) {
        if (err) {
                console.error(err.toString());
                process.exit(1);
        }
}


function localList(opts, callback) {
        callback = once(callback);

        fs.readdir(opts.source, function (read_err, files) {
                if (read_err) {
                        callback(read_err);
                        return;
                }

                vasync.forEachParallel({
                        func: function stat(f, cb) {
                                cb = once(cb);
                                f = opts.source + '/' + f;
                                var f2 = path.resolve(f);
                                fs.stat(f2, function (err, stats) {
                                        if (err) {
                                                cb(err);
                                                return;
                                        }

                                        if (opts.depth >= 1) {
                                                var r = opts.root;
                                                var tmp = path.relative(r, f2);
                                                tmp = tmp.split('/');
                                                if (tmp.length > opts.depth) {
                                                        cb();
                                                        return;
                                                }
                                        }

                                        if (stats.isFile()) {
                                                opts.files.push({
                                                        file: f,
                                                        size: stats.size
                                                });
                                                cb();
                                        } else if (stats.isDirectory()) {
                                                opts.dirs.push(f);
                                                localList({
                                                        depth: opts.depth,
                                                        dirs: opts.dirs,
                                                        files: opts.files,
                                                        root: opts.root,
                                                        source: f
                                                }, cb);
                                        } else {
                                                cb();
                                        }
                                });
                        },
                        inputs: files
                }, callback);
        });
}

function remoteList(client, options, callback) {
        callback = once(callback);

        var queue = new manta.Queue({
            limit: options.parallel,
            worker: function ls(opts, cb) {
                    var last;
                    var _opts = {
                            query: {}
                    };

                    if (options.limit)
                            _opts.query.limit = options.limit;
                    if (opts.marker)
                            _opts.query.marker = opts.marker;

                    client.ls(opts.path, _opts, function (err, res) {
                            ifError(err);

                            res.on('directory', function onDirectory(dir) {
                                    if (dir.name === opts.marker)
                                            return;

                                    var p = opts.path + '/' + dir.name;
                                    var q = p.substr(options.path.length);
                                    var dirName = options.dest + '/' + q;
                                    options.dirs.push(dirName);
                                    last = dir.name;
                                    queue.push({
                                            client: client,
                                            path: p,
                                            type: options.type
                                    });
                            });

                            res.on('object', function onObject(obj) {
                                    if (obj.name === opts.marker)
                                            return;

                                    last = obj.name;
                                    var p = opts.path + '/' + obj.name;
                                    var q = p.substr(options.path.length);
                                    var lname = options.dest + q;
                                    options.files.push({remoteName: p,
                                        localName: lname});
                            });

                            res.once('error', ifError);

                            res.once('end', function onEnd(http_res) {
                                    if (last) {
                                            queue.push({
                                                    marker: last,
                                                    path: opts.path,
                                                    type: opts.type
                                            });
                                    }
                                    cb();
                            });
                    });
            }
        });

        client.info(options.path, function (err, info) {
                if (err) {
                        client.get(options.path, function (err2) {
                                ifError(err2);
                                // We *shouldn't* ever hit this...
                                ifError(err);
                });
                return;
        }

                if (info.extension === 'directory') {
                        queue.push(options);
                }
        });

        queue.once('drain', function () {
                queue.once('end', client.close.bind(client));
                queue.close();
                callback();
        });
}

function parseOptions() {
        var option;
        var opts = {
                depth: 0,
                headers: {},
                log: LOG,
                parallel: 100
        };
        var parser = new getopt.BasicParser('hvrnc:d:k:u:a:H:p:',
                                            process.argv);

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'a':
                        opts.user = option.optarg;
                        break;

                case 'c':
                        opts.copies = parseInt(option.optarg, 10);
                        break;

                case 'r':
                        opts.remote = true;
                        break;

                case 'n':
                        opts.nondestructive = true;
                        break;

                case 'd':
                        opts.depth = parseInt(option.optarg, 10);
                        break;

                case 'h':
                        usage();
                        break;

                case 'H':
                        if (option.optarg.indexOf(': ') === -1) {
                                usage('headers must be in the format of: ' +
                                      '[header] + ": " + [value]');
                        }
                        var p = option.optarg.split(': ');
                        opts.headers[p[0]] = p.slice(1).join(': ');
                        break;

                case 'k':
                        opts.keyId = option.optarg;
                        break;

                case 'p':
                        opts.parallel = parseInt(option.optarg, 10);
                        break;

                case 'u':
                        opts.url = url.parse(option.optarg).href;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }

        }

        try {
                manta.checkBinEnv(opts);
        } catch (err) {
                usage(err.message);
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required arguments: "source"');
        if ((parser.optind() + 1) >= process.argv.length)
                usage('missing required arguments: "path"');

        var tmp = process.argv.slice(parser.optind());
        opts.source = path.normalize(tmp[0]);
        opts.path = path.normalize(tmp[1]);
        ifError(manta.assertPath(opts.path, true));

        return (opts);
}


function printEntry(obj) {
        console.log('%j', obj);
}


function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' [-v] [-a account] [-c copies] [-d depth] [-r] [-n]';
        str += ' [-u url] [-k keyId] ';
        str += '[-H header] [-p parallel] directory path';
        console.error(str);
        console.error(optionsMsg);
        process.exit(msg ? 1 : 0);
}



///--- Mainline

(function main() {
        var options = parseOptions();
        var client = manta.createBinClient(options);

        var localDirQ = new manta.Queue({
            limit: 1,
            worker: function (d, cb) {

                if (options.nondestructive === undefined) {
                    fs.mkdirSync(d);
                } else {
                    console.log('mkdir: ' + d);
                }

                var nxt = options.dirs.shift();
                if (nxt) {
                        localDirQ.push(nxt);
                } else {
                        localDirQ.close();
                }
                cb();
            }
        });

        var remoteDirQ = new manta.Queue({
                limit: 1,
                worker: function (d, cb) {
                        var p = options.path + '/' + d;
                        if (options.nondestructive === undefined) {
                            client.mkdir(p, function (err) {
                                if (err) {
                                        cb(err);
                                        return;
                                }
                                var xt = options.dirs.shift();
                                if (xt) {
                                        remoteDirQ.push(xt);
                                } else {
                                        remoteDirQ.close();
                                }
                                cb();
                            });
                        } else {
                            console.log(p);
                            var nxt = options.dirs.shift();
                            if (nxt) {
                                    remoteDirQ.push(nxt);
                            } else {
                                    remoteDirQ.close();
                            }
                            cb();
                        }
                }
        });

        var downloadFileQ = new manta.Queue({
            limit: options.parallel,
            worker: function get(opts, cb) {
                cb = once(cb);

                if (options.nondestructive === undefined) {
                    var out = fs.createWriteStream(opts.localName);

                    client.get(opts.remoteName, function (err, stream, res) {
                        ifError(err);

                        stream.on('data', function (data) {
                                out.write(data);
                        });
                        stream.on('end', function () {
                            out.destroySoon();
                            cb();
                        });
                    });
                } else {
                    console.log('get: '+opts.remoteName);
                }
            }
        });

        var uploadFileQ = new manta.Queue({
                limit: options.parallel,
                worker: function put(opts, cb) {
                        cb = once(cb);

                        var p = options.path + '/' + opts.file;
                        var _opts = {
                                copies: options.copies,
                                size: opts.size
                        };
                        if (options.nondestructive === undefined) {
                            var stream = fs.createReadStream(opts.file);
                            stream.pause();
                            stream.once('open', function () {
                                    client.put(p, stream, _opts, cb);
                            });
                        } else {
                            console.log(p);
                        }

                }
        });

        function pushFiles() {
                options.files.forEach(function (f) {
                        uploadFileQ.push(f);
                });
                uploadFileQ.once('end', process.exit.bind(process, 0));
                uploadFileQ.close();
        }

        function pullFiles() {
            options.files.forEach(function (f) {
                downloadFileQ.push(f);
            });
            downloadFileQ.once('end', process.exit.bind(process, 0));
            downloadFileQ.close();
        }

        if (options.remote === undefined) {
            options.root = path.resolve(options.source);
            options.dirs = [path.basename(options.root)];
            options.files = [];
        } else {
            options.dest = path.resolve(options.source);
            options.dirs = [];
            options.files = [];
        }


        if (options.remote === undefined) {
            localList(options, function (err) {
                ifError(err);

                if (options.dirs.length) {
                        remoteDirQ.once('end', pushFiles);

                        options.dirs.sort();
                        remoteDirQ.push(options.dirs.shift());
                } else {
                        remoteDirQ.close();
                        pushFiles();
                }
            });
        } else {
            remoteList(client, options, function (err) {
                ifError(err);

                if (options.dirs.length) {
                        localDirQ.once('end', pullFiles);

                        options.dirs.sort();
                        localDirQ.push(options.dirs.shift());
                } else {
                        localDirQ.close();
                        pullFiles();
                }
            });
        }

})();
